{"version":3,"sources":["components/Profile.js","components/Main.js","components/fetchData.js","App.js","serviceWorker.js","index.js"],"names":["Profile","userInfo","undefined","email","phone","address","lastName","firstName","profileImage","className","style","backgroundImage","src","alt","href","title","Object","keys","map","key","index","Main","useState","allUsers","setAllUsers","useEffect","a","async","fetch","then","data","json","response","fetchUserData","to","activeClassName","path","Home","About","RenderProfile","userId","useParams","ProfileList","user","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc43bf35.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Profile.css';\n\nconst Profile = ({ userInfo }) => {\n  if (userInfo === undefined) {\n    return null;\n  }\n  const { email, phone, address, lastName, firstName, profileImage } = userInfo;\n  return (\n    <div className='profile_wrapper container'>\n      <div\n        className='profile_image_wrapper'\n        style={{ backgroundImage: `url(${profileImage})` }}\n      >\n        <img className='profile_image' src={profileImage} alt='profile_image' />\n      </div>\n      <div className='profile_info'>\n        <div className='profile_info_title'>Basic Info</div>\n        <div>\n          name\n          <span>{`${firstName} ${lastName}`}</span>\n        </div>\n        <div>\n          email\n          <span>\n            <a href={`mailto:${email}`} title='Send mail'>\n              {email}\n            </a>\n          </span>\n        </div>\n        <div>\n          phone\n          <span title='Call'>\n            <a href={`tel:${phone}`}>{phone}</a>\n          </span>\n        </div>\n      </div>\n      <div className='profile_info'>\n        <div className='profile_info_title'>Address Details</div>\n        {Object.keys(address).map((key, index) => {\n          return (\n            <div key={index} className='clearfix'>\n              {key}\n              <span>{address[key]}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  NavLink\n} from 'react-router-dom';\n\nimport './styles/Main.css';\n\nimport { fetchUserData } from './fetchData';\nimport Profile from './Profile';\n\nexport const Main = () => {\n  const [allUsers, setAllUsers] = useState([]);\n  useEffect(() => {\n    fetchUserData().then(data => {\n      setAllUsers(data);\n    });\n  }, []);\n  return (\n    <Router>\n      <div>\n        <div className='nav_bar_wrapper'>\n          <div className='nav_bar container'>\n            <ul className='clearfix'>\n              <li>\n                <NavLink to='/home' activeClassName='nav_selected'>\n                  Home\n                </NavLink>\n              </li>\n              <li>\n                <NavLink to='/about' activeClassName='nav_selected'>\n                  About\n                </NavLink>\n              </li>\n              <li>\n                <NavLink to='/allUsers' activeClassName='nav_selected'>\n                  All Users\n                </NavLink>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <Switch>\n          <Route path='/about'>\n            <About />\n          </Route>\n          <Route path='/allUsers'>\n            <ProfileList allUsers={allUsers} />\n          </Route>\n          <Route path={`/user/:userId`}>\n            <RenderProfile allUsers={allUsers} />\n          </Route>\n          <Route path='/'>\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nconst Home = () => {\n  return (\n    <div className='container'>\n      <div className='pages'>\n        <h2>Home</h2>\n        <p>You are Home :)</p>\n      </div>\n    </div>\n  );\n};\n\nconst About = () => {\n  return (\n    <div className='container'>\n      <div className='pages'>\n        <h2>About</h2>\n        <p>Basically just trying out react router</p>\n      </div>\n    </div>\n  );\n};\n\nconst RenderProfile = ({ allUsers }) => {\n  const { userId } = useParams();\n  return <Profile userInfo={allUsers[userId - 1]} />;\n};\n\nconst ProfileList = ({ allUsers }) => {\n  return (\n    <div className='user_list_wrapper container'>\n      <h2>Users</h2>\n      <ul className='user_list clearfix'>\n        {allUsers.map(user => (\n          <li key={user.id}>\n            <Link to={`/user/${user.id}`}>\n              <img src={user.profileImage} alt='profileImage' />\n              <div>{user.firstName}</div>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const url =\n  'https://cors-anywhere.herokuapp.com/https://mock-io.herokuapp.com/users';\n\nexport const fetchUserData = async () => {\n  const response = await fetch(url).then(data => {\n    return data.json();\n  });\n  return response;\n};\n","import React from 'react';\nimport { Main } from './components/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}